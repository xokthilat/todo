// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/todo/data/dao/auth_dao.dart';
import 'features/todo/data/dao/todo_dao.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 5153654789766496859),
      name: 'TodoDao',
      lastPropertyId: const IdUid(6, 7538677957404023759),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2173688525174579373),
            name: 'localId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1219198590821541299),
            name: 'createdAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8590469077101829525),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6164288061332199586),
            name: 'id',
            type: 9,
            flags: 2048,
            indexId: const IdUid(1, 5876809906245186319)),
        ModelProperty(
            id: const IdUid(5, 1380453343063012863),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7538677957404023759),
            name: 'dbStatus',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 5961145985083164470),
      name: 'AuthDao',
      lastPropertyId: const IdUid(4, 4666402132775005527),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 359568829873769155),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2172916092541893730),
            name: 'lastTouch',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7229897798499552849),
            name: 'lastOnline',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4666402132775005527),
            name: 'passcode',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 5961145985083164470),
      lastIndexId: const IdUid(1, 5876809906245186319),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    TodoDao: EntityDefinition<TodoDao>(
        model: _entities[0],
        toOneRelations: (TodoDao object) => [],
        toManyRelations: (TodoDao object) => {},
        getId: (TodoDao object) => object.localId,
        setId: (TodoDao object, int id) {
          object.localId = id;
        },
        objectToFB: (TodoDao object, fb.Builder fbb) {
          final descriptionOffset = fbb.writeString(object.description);
          final idOffset = fbb.writeString(object.id);
          final titleOffset = fbb.writeString(object.title);
          fbb.startTable(7);
          fbb.addInt64(0, object.localId);
          fbb.addInt64(1, object.createdAt.millisecondsSinceEpoch);
          fbb.addOffset(2, descriptionOffset);
          fbb.addOffset(3, idOffset);
          fbb.addOffset(4, titleOffset);
          fbb.addInt64(5, object.dbStatus);
          fbb.finish(fbb.endTable());
          return object.localId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final localIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final object = TodoDao(
              localId: localIdParam,
              createdAt: createdAtParam,
              description: descriptionParam,
              id: idParam,
              title: titleParam)
            ..dbStatus = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 14);

          return object;
        }),
    AuthDao: EntityDefinition<AuthDao>(
        model: _entities[1],
        toOneRelations: (AuthDao object) => [],
        toManyRelations: (AuthDao object) => {},
        getId: (AuthDao object) => object.id,
        setId: (AuthDao object, int id) {
          object.id = id;
        },
        objectToFB: (AuthDao object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.lastTouch.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastOnline.millisecondsSinceEpoch);
          fbb.addInt64(3, object.passcode);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final lastTouchParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastOnlineParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final passcodeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final object = AuthDao(
              id: idParam,
              lastTouch: lastTouchParam,
              lastOnline: lastOnlineParam,
              passcode: passcodeParam);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [TodoDao] entity fields to define ObjectBox queries.
class TodoDao_ {
  /// see [TodoDao.localId]
  static final localId =
      QueryIntegerProperty<TodoDao>(_entities[0].properties[0]);

  /// see [TodoDao.createdAt]
  static final createdAt =
      QueryIntegerProperty<TodoDao>(_entities[0].properties[1]);

  /// see [TodoDao.description]
  static final description =
      QueryStringProperty<TodoDao>(_entities[0].properties[2]);

  /// see [TodoDao.id]
  static final id = QueryStringProperty<TodoDao>(_entities[0].properties[3]);

  /// see [TodoDao.title]
  static final title = QueryStringProperty<TodoDao>(_entities[0].properties[4]);

  /// see [TodoDao.dbStatus]
  static final dbStatus =
      QueryIntegerProperty<TodoDao>(_entities[0].properties[5]);
}

/// [AuthDao] entity fields to define ObjectBox queries.
class AuthDao_ {
  /// see [AuthDao.id]
  static final id = QueryIntegerProperty<AuthDao>(_entities[1].properties[0]);

  /// see [AuthDao.lastTouch]
  static final lastTouch =
      QueryIntegerProperty<AuthDao>(_entities[1].properties[1]);

  /// see [AuthDao.lastOnline]
  static final lastOnline =
      QueryIntegerProperty<AuthDao>(_entities[1].properties[2]);

  /// see [AuthDao.passcode]
  static final passcode =
      QueryIntegerProperty<AuthDao>(_entities[1].properties[3]);
}
